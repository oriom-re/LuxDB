
#!/usr/bin/env python3
"""
üí¨ Federa Chat - Interaktywny Chat z FederƒÖ

Pozwala na komunikacjƒô z FederƒÖ przez terminal
"""

import asyncio
import sys
import json
from datetime import datetime
from federacja.core.bus import FederationBus, FederationMessage
from federacja.core.logger import FederationLogger

class FederaChat:
    """Terminal chat z FederƒÖ"""
    
    def __init__(self):
        self.logger = FederationLogger({'level': 'INFO', 'format': 'console'})
        self.bus = FederationBus(self.logger)
        self.chat_id = "human_chat"
        self.running = False
        
    async def start(self):
        """Uruchamia chat"""
        print("üí¨ Federa Chat - ≈ÅƒÖczenie z FederƒÖ...")
        
        # Uruchom bus
        await self.bus.start()
        
        # Poczekaj na Federƒô
        await self._wait_for_federa()
        
        # Uruchom chat
        await self._run_chat()
        
    async def _wait_for_federa(self):
        """Czeka na dostƒôpno≈õƒá Federy"""
        print("üîç Szukam Federy w systemie...")
        
        max_attempts = 10
        for attempt in range(max_attempts):
            try:
                # Sprawd≈∫ czy Federa jest dostƒôpna
                message = FederationMessage(
                    uid=f"chat_ping_{attempt}",
                    from_module=self.chat_id,
                    to_module="federa",
                    message_type="get_status",
                    data={},
                    timestamp=datetime.now().timestamp()
                )
                
                # Symuluj wys≈Çanie - w rzeczywisto≈õci potrzebujemy po≈ÇƒÖczenia z dzia≈ÇajƒÖcƒÖ FederƒÖ
                print(f"üîÑ Pr√≥ba {attempt + 1}/{max_attempts} - szukam Federy...")
                await asyncio.sleep(1)
                
                # Dla demonstracji, za≈Ç√≥≈ºmy ≈ºe Federa jest dostƒôpna po 3 pr√≥bach
                if attempt >= 2:
                    print("‚úÖ Federa znaleziona! NawiƒÖzywanie komunikacji...")
                    return True
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Pr√≥ba {attempt + 1} nieudana: {e}")
                await asyncio.sleep(2)
        
        print("‚ùå Nie uda≈Ço siƒô po≈ÇƒÖczyƒá z FederƒÖ")
        return False
        
    async def _run_chat(self):
        """Uruchamia g≈Ç√≥wnƒÖ pƒôtlƒô chatu"""
        self.running = True
        
        print("\n" + "="*60)
        print("üß† FEDERA CHAT - Rozmowa z InteligentnƒÖ KoordynatorkƒÖ")
        print("="*60)
        print("üí° Dostƒôpne komendy:")
        print("   ‚Ä¢ status - sprawd≈∫ status systemu")
        print("   ‚Ä¢ modules - lista aktywnych modu≈Ç√≥w")
        print("   ‚Ä¢ health - sprawd≈∫ zdrowie modu≈Ç√≥w")
        print("   ‚Ä¢ logs [modu≈Ç] - poka≈º logi modu≈Çu")
        print("   ‚Ä¢ monitoring - raport monitorowania")
        print("   ‚Ä¢ diagnosis - diagnostyka systemu")
        print("   ‚Ä¢ help - pomoc")
        print("   ‚Ä¢ exit - zako≈Ñcz chat")
        print("-"*60)
        print("üéØ Federa jest gotowa do rozmowy!")
        print("")
        
        while self.running:
            try:
                # Pobierz input od u≈ºytkownika
                user_input = input("üó£Ô∏è Ty: ").strip()
                
                if not user_input:
                    continue
                    
                # Obs≈Çu≈º specjalne komendy
                if user_input.lower() == 'exit':
                    break
                elif user_input.lower() == 'help':
                    await self._show_help()
                    continue
                    
                # Wy≈õlij wiadomo≈õƒá do Federy
                response = await self._send_to_federa(user_input)
                
                # Wy≈õwietl odpowied≈∫
                await self._display_response(response)
                
            except KeyboardInterrupt:
                print("\nüëã Przerywanie chatu...")
                break
            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd chatu: {e}")
                
        print("‚ú® Chat z FederƒÖ zako≈Ñczony")
        
    async def _send_to_federa(self, user_input: str) -> dict:
        """Wysy≈Ça wiadomo≈õƒá do Federy"""
        try:
            # Parsuj komendƒô
            command, *args = user_input.split()
            
            # Mapuj komendy na akcje Federy
            if command.lower() == 'status':
                return await self._get_federa_status()
            elif command.lower() == 'modules':
                return await self._get_active_modules()
            elif command.lower() == 'health':
                return await self._get_module_health()
            elif command.lower() == 'logs':
                module_name = args[0] if args else None
                return await self._get_module_logs(module_name)
            elif command.lower() == 'monitoring':
                return await self._get_monitoring_summary()
            elif command.lower() == 'diagnosis':
                return await self._get_system_diagnosis()
            else:
                # Og√≥lne pytanie do Federy
                return await self._ask_federa(user_input)
                
        except Exception as e:
            return {
                'error': f'B≈ÇƒÖd komunikacji: {str(e)}',
                'suggestion': 'Spr√≥buj u≈ºyƒá komendy "help" aby zobaczyƒá dostƒôpne opcje'
            }
    
    async def _get_federa_status(self) -> dict:
        """Pobiera status Federy"""
        # Symulacja odpowiedzi Federy
        return {
            'type': 'status',
            'data': {
                'personality_name': 'Federa',
                'active': True,
                'active_modules': ['database_manager', 'module_metadata_manager'],
                'system_load': 0.3,
                'auto_scaling': True,
                'monitoring': {
                    'total_modules_monitored': 3,
                    'success_rate': 66.7,
                    'recent_failures': ['realm_memory: b≈ÇƒÖd konstruktora']
                }
            },
            'message': 'Jestem aktywna i monitorujƒô system. Wykry≈Çam problemy z niekt√≥rymi modu≈Çami.'
        }
    
    async def _get_active_modules(self) -> dict:
        """Pobiera listƒô aktywnych modu≈Ç√≥w"""
        return {
            'type': 'modules',
            'data': {
                'active_modules': ['database_manager'],
                'managed_by_federa': ['module_metadata_manager', 'realm_memory'],
                'static_modules': ['federa']
            },
            'message': 'Lista wszystkich modu≈Ç√≥w w systemie. Czƒô≈õƒá jest zarzƒÖdzana przeze mnie.'
        }
    
    async def _get_module_health(self) -> dict:
        """Pobiera zdrowie modu≈Ç√≥w"""
        return {
            'type': 'health',
            'data': {
                'database_manager': True,
                'module_metadata_manager': False,
                'realm_memory': False,
                'federa': True
            },
            'message': 'Niekt√≥re modu≈Çy wymagajƒÖ naprawy. Mogƒô spr√≥bowaƒá je zrestartowaƒá.'
        }
    
    async def _get_module_logs(self, module_name: str = None) -> dict:
        """Pobiera logi modu≈Ç√≥w"""
        if module_name:
            return {
                'type': 'logs',
                'data': {
                    'module': module_name,
                    'logs': [
                        {'timestamp': '2024-01-01 20:01:59', 'level': 'error', 'message': 'B≈ÇƒÖd inicjalizacji'},
                        {'timestamp': '2024-01-01 20:01:58', 'level': 'info', 'message': 'Rozpoczƒôcie inicjalizacji'}
                    ]
                },
                'message': f'Ostatnie logi modu≈Çu {module_name}'
            }
        else:
            return {
                'type': 'logs',
                'data': {
                    'available_modules': ['database_manager', 'realm_memory', 'federa'],
                    'total_logs': 15
                },
                'message': 'Dostƒôpne logi modu≈Ç√≥w. U≈ºyj "logs [nazwa_modu≈Çu]" aby zobaczyƒá szczeg√≥≈Çy.'
            }
    
    async def _get_monitoring_summary(self) -> dict:
        """Pobiera raport monitorowania"""
        return {
            'type': 'monitoring',
            'data': {
                'total_modules_monitored': 3,
                'successful_initializations': 2,
                'failed_initializations': 1,
                'success_rate': 66.7,
                'average_initialization_time': 1.2,
                'recent_failures': [
                    {
                        'module': 'realm_memory',
                        'error': 'MemoryRealmModule.__init__() missing 1 required positional argument: name',
                        'timestamp': '2024-01-01 20:01:59'
                    }
                ]
            },
            'message': 'Raport monitorowania modu≈Ç√≥w. Jeden modu≈Ç wymaga naprawy konstruktora.'
        }
    
    async def _get_system_diagnosis(self) -> dict:
        """Pobiera diagnostykƒô systemu"""
        return {
            'type': 'diagnosis',
            'data': {
                'can_manage': True,
                'working_components': ['federation_bus', 'database_manager', 'configuration'],
                'missing_components': [],
                'issues': ['realm_memory: b≈ÇƒÖd konstruktora'],
                'repair_suggestions': [
                    'Napraw konstruktor MemoryRealmModule',
                    'Dodaj wymagany parametr "name" do inicjalizacji'
                ]
            },
            'message': 'System jest w wiƒôkszo≈õci sprawny. Wykry≈Çam jeden problem wymagajƒÖcy naprawy.'
        }
    
    async def _ask_federa(self, question: str) -> dict:
        """Zadaje og√≥lne pytanie Federze"""
        return {
            'type': 'conversation',
            'data': {
                'question': question,
                'context': 'general_chat'
            },
            'message': f'Rozumiem Twoje pytanie: "{question}". Jako Federa, mogƒô pom√≥c Ci w zarzƒÖdzaniu systemem federacji. U≈ºyj konkretnych komend aby uzyskaƒá szczeg√≥≈Çowe informacje.'
        }
    
    async def _display_response(self, response: dict):
        """Wy≈õwietla odpowied≈∫ Federy"""
        print(f"üß† Federa: {response.get('message', 'Brak odpowiedzi')}")
        
        if 'data' in response:
            data = response['data']
            response_type = response.get('type', 'unknown')
            
            if response_type == 'status':
                print(f"   üìä Status: {'‚úÖ Aktywna' if data.get('active') else '‚ùå Nieaktywna'}")
                print(f"   üîß Aktywnych modu≈Ç√≥w: {len(data.get('active_modules', []))}")
                print(f"   üìà ObciƒÖ≈ºenie systemu: {data.get('system_load', 0):.1%}")
                
            elif response_type == 'modules':
                print(f"   ‚úÖ Aktywne: {', '.join(data.get('active_modules', []))}")
                print(f"   üß† ZarzƒÖdzane przez Federƒô: {', '.join(data.get('managed_by_federa', []))}")
                
            elif response_type == 'health':
                print("   üè• Zdrowie modu≈Ç√≥w:")
                for module, healthy in data.items():
                    status = "‚úÖ Zdrowy" if healthy else "‚ùå Wymaga naprawy"
                    print(f"      ‚Ä¢ {module}: {status}")
                    
            elif response_type == 'monitoring':
                print(f"   üìä Monitorowanych modu≈Ç√≥w: {data.get('total_modules_monitored', 0)}")
                print(f"   ‚úÖ Sukces: {data.get('successful_initializations', 0)}")
                print(f"   ‚ùå B≈Çƒôdy: {data.get('failed_initializations', 0)}")
                print(f"   üìà Wska≈∫nik sukcesu: {data.get('success_rate', 0):.1f}%")
                
            elif response_type == 'diagnosis':
                print(f"   üéØ Mo≈ºe zarzƒÖdzaƒá: {'‚úÖ Tak' if data.get('can_manage') else '‚ùå Nie'}")
                if data.get('issues'):
                    print(f"   ‚ö†Ô∏è Problemy: {', '.join(data.get('issues', []))}")
                if data.get('repair_suggestions'):
                    print("   üîß Sugestie naprawcze:")
                    for suggestion in data.get('repair_suggestions', []):
                        print(f"      ‚Ä¢ {suggestion}")
        
        print()  # Pusta linia dla czytelno≈õci
    
    async def _show_help(self):
        """Wy≈õwietla pomoc"""
        print("\nüí° POMOC - Komendy Federa Chat:")
        print("   ‚Ä¢ status - sprawd≈∫ status Federy i systemu")
        print("   ‚Ä¢ modules - lista wszystkich modu≈Ç√≥w")
        print("   ‚Ä¢ health - sprawd≈∫ zdrowie modu≈Ç√≥w")
        print("   ‚Ä¢ logs [modu≈Ç] - poka≈º logi konkretnego modu≈Çu")
        print("   ‚Ä¢ monitoring - szczeg√≥≈Çowy raport monitorowania")
        print("   ‚Ä¢ diagnosis - pe≈Çna diagnostyka systemu")
        print("   ‚Ä¢ help - ta pomoc")
        print("   ‚Ä¢ exit - zako≈Ñcz chat")
        print("\nüéØ Mo≈ºesz te≈º zadawaƒá og√≥lne pytania - Federa postara siƒô odpowiedzieƒá!")
        print()

async def main():
    """G≈Ç√≥wna funkcja chatu"""
    chat = FederaChat()
    await chat.start()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Chat zako≈Ñczony")
