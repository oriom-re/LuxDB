
#!/usr/bin/env python3
"""
üöå LuxDB v3 Service - Astralny System oparty na LuxBus

Nowa generacja serwisu z pe≈ÇnƒÖ integracjƒÖ LuxBus Core
i mo≈ºliwo≈õciami self-modification.
"""

import asyncio
import argparse
import signal
import sys
import os
from datetime import datetime

# Dodaj ≈õcie≈ºkƒô do modu≈Ç√≥w
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from luxdb_v2.core.luxbus_core import create_luxbus_core
from luxdb_v2.core.astral_engine_v3 import create_astral_engine_v3, quick_start_v3
from luxdb_v2.config import AstralConfig


class LuxDBv3Service:
    """
    G≈Ç√≥wny serwis LuxDB v3 - zarzƒÖdza systemem astralnym opartym na LuxBus
    """
    
    def __init__(self, port: int = 5000):
        self.port = port
        self.engine = None
        self.luxbus = None
        self.running = False
        
        # Obs≈Çuga sygna≈Ç√≥w
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    async def start(self):
        """Uruchamia serwis LuxDB v3"""
        try:
            print("üöå Starting LuxDB v3 Service...")
            print(f"üåå Initializing LuxBus Core...")
            
            # Utw√≥rz LuxBus Core
            self.luxbus = create_luxbus_core(f"luxdb_v3_{datetime.now().strftime('%H%M%S')}")
            
            # Szybkie uruchomienie AstralEngine v3
            print(f"üîÆ Starting AstralEngine v3...")
            self.engine = await quick_start_v3(
                realms={'primary': 'sqlite://db/luxdb_v3.db'},
                flows={
                    'rest': {'host': '0.0.0.0', 'port': self.port},
                    'websocket': {'host': '0.0.0.0', 'port': self.port + 1}
                }
            )
            
            self.running = True
            
            # Wy≈õwietl status startowy
            self._print_startup_status()
            
            # G≈Ç√≥wna pƒôtla serwisu
            await self._main_loop()
            
        except KeyboardInterrupt:
            print(f"\n‚≠ê Otrzymano sygna≈Ç przerwania...")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas uruchamiania: {e}")
            raise
        finally:
            await self.stop()
    
    async def stop(self):
        """Zatrzymuje serwis"""
        if self.running:
            print(f"üïäÔ∏è Zatrzymywanie LuxDB v3 Service...")
            self.running = False
            
            if self.engine:
                try:
                    await self.engine.transcend()
                    print(f"‚ú® LuxDB v3 Service zatrzymany gracefully")
                except Exception as e:
                    print(f"‚ö†Ô∏è B≈ÇƒÖd podczas zatrzymywania: {e}")
    
    def _print_startup_status(self):
        """Wy≈õwietla status po uruchomieniu"""
        if not self.engine:
            return
        
        status = self.engine.get_status()
        luxbus_status = self.luxbus.get_status()
        
        print(f"\n{'='*70}")
        print(f"üöå LuxDB v3 Service - Status Astralny")
        print(f"{'='*70}")
        print(f"üÜî Engine ID: {status['engine_id']}")
        print(f"üöå LuxBus Node: {luxbus_status['node_id']}")
        print(f"‚è±Ô∏è Uruchomiony: {status.get('awakened_at', 'Unknown')}")
        print(f"üåç Realms: {', '.join(status['realms'])}")
        print(f"üåä Flows: {', '.join(status['flows'])}")
        print(f"üì¶ Modu≈Çy LuxBus: {luxbus_status['modules']}")
        print(f"‚öñÔ∏è Status: Running")
        print(f"{'='*70}")
        print(f"üåê REST API: http://0.0.0.0:{self.port}")
        print(f"üì° WebSocket: ws://0.0.0.0:{self.port + 1}")
        print(f"üí¨ Terminal Chat: python luxdb_v2/terminal_chat.py")
        print(f"{'='*70}")
        print(f"üí´ System astralny v3 gotowy do pracy!")
        print(f"   Naci≈õnij Ctrl+C aby zatrzymaƒá...")
        print(f"{'='*70}\n")
    
    async def _main_loop(self):
        """G≈Ç√≥wna pƒôtla serwisu"""
        last_status_time = asyncio.get_event_loop().time()
        status_interval = 300  # 5 minut
        
        while self.running:
            try:
                await asyncio.sleep(1)
                
                # Periodyczny status (co 5 minut)
                current_time = asyncio.get_event_loop().time()
                if current_time - last_status_time > status_interval:
                    await self._print_periodic_status()
                    last_status_time = current_time
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"‚ö†Ô∏è B≈ÇƒÖd w g≈Ç√≥wnej pƒôtli: {e}")
                await asyncio.sleep(5)
    
    async def _print_periodic_status(self):
        """Wy≈õwietla periodyczny status"""
        if not self.engine:
            return
        
        try:
            meditation = self.engine.meditate()
            luxbus_stats = self.luxbus.get_status()
            
            print(f"üìä Status astralny v3 - "
                  f"Modu≈Çy: {len(luxbus_stats['modules'])}, "
                  f"Uptime: {meditation.get('uptime', 'unknown')}, "
                  f"LuxBus packets: {luxbus_stats.get('dispatcher_stats', {}).get('packets_processed', 0)}")
                  
        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd podczas pobierania statusu: {e}")
    
    def _signal_handler(self, signum, frame):
        """Obs≈Çuga sygna≈Ç√≥w systemowych"""
        print(f"\n‚≠ê Otrzymano sygna≈Ç {signum}, zatrzymywanie...")
        self.running = False


async def main():
    """G≈Ç√≥wna funkcja"""
    parser = argparse.ArgumentParser(description='LuxDB v3 Service - Astralny System oparty na LuxBus')
    
    parser.add_argument('--port', '-p', type=int, default=5000,
                       help='Port dla REST API (domy≈õlnie 5000)')
    parser.add_argument('--version', action='store_true',
                       help='Poka≈º wersjƒô')
    
    args = parser.parse_args()
    
    if args.version:
        print("LuxDB v3.0.0-luxbus - Astralna Biblioteka Danych z LuxBus Core")
        return
    
    # Uruchom serwis
    service = LuxDBv3Service(port=args.port)
    
    try:
        await service.start()
    except Exception as e:
        print(f"üí• Krytyczny b≈ÇƒÖd serwisu: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã LuxDB v3 Service stopped")
