
"""
LuxDB Example 08: Rzeczywiste scenariusze biznesowe
- E-commerce: zarzƒÖdzanie produktami i zam√≥wieniami
- CRM: zarzƒÖdzanie klientami i kontaktami
- System logowania: monitoring i alerting
- Data warehouse: ETL i raportowanie
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from manager import get_db_manager
from utils import (
    get_db_logger, handle_database_errors, ErrorCollector,
    DataFilter, DataTransformer, DataAggregator, DataValidator,
    DataExporter, SQLQueryBuilder,
    LuxDBError, ModelValidationError
)
from datetime import datetime, timedelta
import random
from decimal import Decimal

# Definicje modeli dla rzeczywistych scenariuszy
from sqlalchemy import Column, Integer, String, Decimal as SQLDecimal, DateTime, Boolean, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class Customer(Base):
    """Model klienta dla CRM"""
    __tablename__ = 'customers'
    
    id = Column(Integer, primary_key=True)
    first_name = Column(String(50), nullable=False)
    last_name = Column(String(50), nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    phone = Column(String(20))
    company = Column(String(100))
    status = Column(String(20), default='active')  # active, inactive, prospect
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    
    orders = relationship("Order", back_populates="customer")

class Product(Base):
    """Model produktu dla e-commerce"""
    __tablename__ = 'products'
    
    id = Column(Integer, primary_key=True)
    name = Column(String(200), nullable=False)
    sku = Column(String(50), unique=True, nullable=False)
    price = Column(SQLDecimal(10, 2), nullable=False)
    stock_quantity = Column(Integer, default=0)
    category = Column(String(50))
    description = Column(Text)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)

class Order(Base):
    """Model zam√≥wienia"""
    __tablename__ = 'orders'
    
    id = Column(Integer, primary_key=True)
    customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False)
    order_number = Column(String(50), unique=True, nullable=False)
    status = Column(String(20), default='pending')  # pending, confirmed, shipped, delivered, cancelled
    total_amount = Column(SQLDecimal(10, 2), nullable=False)
    order_date = Column(DateTime, default=datetime.now)
    shipping_date = Column(DateTime)
    delivery_date = Column(DateTime)
    
    customer = relationship("Customer", back_populates="orders")
    items = relationship("OrderItem", back_populates="order")

class OrderItem(Base):
    """Pozycja zam√≥wienia"""
    __tablename__ = 'order_items'
    
    id = Column(Integer, primary_key=True)
    order_id = Column(Integer, ForeignKey('orders.id'), nullable=False)
    product_id = Column(Integer, ForeignKey('products.id'), nullable=False)
    quantity = Column(Integer, nullable=False)
    unit_price = Column(SQLDecimal(10, 2), nullable=False)
    total_price = Column(SQLDecimal(10, 2), nullable=False)
    
    order = relationship("Order", back_populates="items")
    product = relationship("Product")

class SystemAlert(Base):
    """Alerty systemowe"""
    __tablename__ = 'system_alerts'
    
    id = Column(Integer, primary_key=True)
    alert_type = Column(String(50), nullable=False)  # performance, security, business
    severity = Column(String(20), nullable=False)    # low, medium, high, critical
    title = Column(String(200), nullable=False)
    message = Column(Text, nullable=False)
    source_system = Column(String(50))
    is_resolved = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.now)
    resolved_at = Column(DateTime)

@handle_database_errors("ecommerce_scenario")
def ecommerce_scenario():
    """Scenariusz e-commerce: zarzƒÖdzanie produktami i zam√≥wieniami"""
    print("\n=== üõí Scenariusz E-commerce ===")
    
    db = get_db_manager()
    logger = get_db_logger()
    
    # Utw√≥rz bazƒô e-commerce
    if not db.create_database("ecommerce_db"):
        raise LuxDBError("Nie uda≈Ço siƒô utworzyƒá bazy e-commerce")
    
    # Utw√≥rz tabele
    for model in [Customer, Product, Order, OrderItem]:
        db.create_table_from_model("ecommerce_db", model)
    
    logger.log_database_operation("ecommerce_setup", "ecommerce_db", True, "Created e-commerce tables")
    
    # 1. ZarzƒÖdzanie produktami
    print("1. üì¶ ZarzƒÖdzanie katalogiem produkt√≥w")
    
    categories = ["Electronics", "Clothing", "Home & Garden", "Books", "Sports"]
    products_data = []
    
    for i in range(100):
        product = {
            "name": f"Product {i:03d}",
            "sku": f"SKU-{i:05d}",
            "price": round(random.uniform(10, 500), 2),
            "stock_quantity": random.randint(0, 100),
            "category": random.choice(categories),
            "description": f"Description for product {i:03d}",
            "is_active": random.random() > 0.1  # 90% aktywnych
        }
        products_data.append(product)
    
    # Wstaw produkty w batchu dla wydajno≈õci
    success = db.insert_batch("ecommerce_db", Product, products_data)
    if success:
        print(f"  ‚úÖ Dodano {len(products_data)} produkt√≥w")
    else:
        print("  ‚ùå B≈ÇƒÖd dodawania produkt√≥w")
    
    # 2. ZarzƒÖdzanie klientami
    print("\n2. üë• ZarzƒÖdzanie bazƒÖ klient√≥w")
    
    first_names = ["Jan", "Anna", "Piotr", "Maria", "Tomasz", "Agnieszka", "Micha≈Ç", "Katarzyna"]
    last_names = ["Kowalski", "Nowak", "Wi≈õniewski", "DƒÖbrowski", "Lewandowski", "W√≥jcik"]
    companies = ["TechCorp", "InnoSoft", "DataSystems", "CloudTech", None]
    
    customers_data = []
    for i in range(50):
        customer = {
            "first_name": random.choice(first_names),
            "last_name": random.choice(last_names),
            "email": f"customer{i:03d}@example.com",
            "phone": f"+48-{random.randint(100, 999)}-{random.randint(100, 999)}-{random.randint(100, 999)}",
            "company": random.choice(companies),
            "status": random.choice(["active", "active", "active", "prospect", "inactive"])  # Wiƒôcej aktywnych
        }
        customers_data.append(customer)
    
    db.insert_batch("ecommerce_db", Customer, customers_data)
    print(f"  ‚úÖ Dodano {len(customers_data)} klient√≥w")
    
    # 3. Generowanie zam√≥wie≈Ñ
    print("\n3. üßæ Generowanie zam√≥wie≈Ñ")
    
    # Pobierz klient√≥w i produkty
    customers = db.select_data("ecommerce_db", Customer, {"status": "active"})
    products = db.select_data("ecommerce_db", Product, {"is_active": True})
    
    orders_data = []
    order_items_data = []
    
    for i in range(200):
        customer = random.choice(customers)
        order_date = datetime.now() - timedelta(days=random.randint(0, 90))
        
        order = {
            "customer_id": customer.id,
            "order_number": f"ORD-{i:06d}",
            "status": random.choice(["pending", "confirmed", "shipped", "delivered"]),
            "order_date": order_date,
            "total_amount": 0  # Bƒôdzie obliczone p√≥≈∫niej
        }
        
        # Symuluj shipping i delivery dates
        if order["status"] in ["shipped", "delivered"]:
            order["shipping_date"] = order_date + timedelta(days=random.randint(1, 3))
        if order["status"] == "delivered":
            order["delivery_date"] = order["shipping_date"] + timedelta(days=random.randint(1, 7))
        
        orders_data.append(order)
        
        # Generuj pozycje zam√≥wienia
        num_items = random.randint(1, 5)
        order_total = Decimal('0.00')
        
        for j in range(num_items):
            product = random.choice(products)
            quantity = random.randint(1, 3)
            unit_price = product.price
            total_price = unit_price * quantity
            order_total += total_price
            
            order_item = {
                "order_id": i + 1,  # Zak≈ÇadajƒÖc auto-increment ID
                "product_id": product.id,
                "quantity": quantity,
                "unit_price": float(unit_price),
                "total_price": float(total_price)
            }
            order_items_data.append(order_item)
        
        orders_data[i]["total_amount"] = float(order_total)
    
    # Wstaw zam√≥wienia
    db.insert_batch("ecommerce_db", Order, orders_data)
    print(f"  ‚úÖ Wygenerowano {len(orders_data)} zam√≥wie≈Ñ")
    
    # 4. Analiza sprzeda≈ºy
    print("\n4. üìä Analiza wynik√≥w sprzeda≈ºy")
    
    builder = SQLQueryBuilder()
    
    # Sprzeda≈º wed≈Çug kategorii
    sales_query = (builder
                  .select("p.category",
                         "COUNT(DISTINCT o.id) as order_count",
                         "SUM(oi.total_price) as total_revenue",
                         "AVG(oi.total_price) as avg_item_value")
                  .from_table("orders o")
                  .join("order_items oi", "o.id = oi.order_id")
                  .join("products p", "oi.product_id = p.id")
                  .where("o.status IN ('confirmed', 'shipped', 'delivered')")
                  .group_by("p.category")
                  .order_by("total_revenue", "DESC")
                  .build())
    
    try:
        sales_results = db.execute_raw_sql("ecommerce_db", sales_query)
        if sales_results:
            print(f"  {'Kategoria':<15} {'Zam√≥wienia':<10} {'Przych√≥d':<12} {'≈ör. warto≈õƒá'}")
            print(f"  {'-'*15} {'-'*10} {'-'*12} {'-'*10}")
            
            for row in sales_results:
                print(f"  {row['category']:<15} {row['order_count']:<10} {row['total_revenue']:<12.2f} {row['avg_item_value']:<10.2f}")
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd analizy sprzeda≈ºy: {e}")
    
    # 5. Alert o niskich stanach magazynowych
    print("\n5. ‚ö†Ô∏è Monitoring stanu magazynu")
    
    low_stock_query = (SQLQueryBuilder()
                      .select("name", "sku", "stock_quantity", "category")
                      .from_table("products")
                      .where("stock_quantity < 10")
                      .where("is_active = 1")
                      .order_by("stock_quantity", "ASC")
                      .build())
    
    try:
        low_stock = db.execute_raw_sql("ecommerce_db", low_stock_query)
        if low_stock:
            print(f"  üî¥ Produkty o niskim stanie ({len(low_stock)}):")
            for product in low_stock[:5]:  # Poka≈º top 5
                print(f"    {product['sku']}: {product['name']} - {product['stock_quantity']} szt.")
        else:
            print("  ‚úÖ Wszystkie produkty majƒÖ wystarczajƒÖcy stan magazynowy")
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd sprawdzania stanu magazynu: {e}")

@handle_database_errors("crm_scenario")
def crm_scenario():
    """Scenariusz CRM: zarzƒÖdzanie relacjami z klientami"""
    print("\n=== üëî Scenariusz CRM ===")
    
    db = get_db_manager()
    logger = get_db_logger()
    
    # U≈ºyj istniejƒÖcej bazy ecommerce_db z danymi klient√≥w
    if "ecommerce_db" not in db.list_databases():
        print("  ‚ùå Baza e-commerce nie istnieje, uruchom najpierw ecommerce_scenario()")
        return
    
    # 1. Segmentacja klient√≥w
    print("1. üéØ Segmentacja klient√≥w")
    
    # Pobierz dane klient√≥w z ich zam√≥wieniami
    customer_analysis_query = """
    SELECT 
        c.id,
        c.first_name,
        c.last_name,
        c.email,
        c.company,
        c.status,
        COUNT(o.id) as order_count,
        COALESCE(SUM(o.total_amount), 0) as total_spent,
        MAX(o.order_date) as last_order_date,
        CASE 
            WHEN COUNT(o.id) = 0 THEN 'No Orders'
            WHEN COUNT(o.id) >= 5 AND SUM(o.total_amount) >= 1000 THEN 'VIP'
            WHEN COUNT(o.id) >= 2 AND SUM(o.total_amount) >= 500 THEN 'Regular'
            WHEN COUNT(o.id) >= 1 THEN 'Occasional'
            ELSE 'Prospect'
        END as customer_segment
    FROM customers c
    LEFT JOIN orders o ON c.id = o.customer_id
    GROUP BY c.id, c.first_name, c.last_name, c.email, c.company, c.status
    """
    
    try:
        customer_segments = db.execute_raw_sql("ecommerce_db", customer_analysis_query)
        if customer_segments:
            # Agreguj wed≈Çug segment√≥w
            segments_data = []
            for customer in customer_segments:
                segments_data.append({
                    "customer_id": customer["id"],
                    "name": f"{customer['first_name']} {customer['last_name']}",
                    "email": customer["email"],
                    "segment": customer["customer_segment"],
                    "total_spent": float(customer["total_spent"]),
                    "order_count": customer["order_count"]
                })
            
            # Analizuj segmenty
            segment_stats = DataAggregator.count_by_field(segments_data, "segment")
            
            print(f"  {'Segment':<12} {'Klienci':<8} {'Procent'}")
            print(f"  {'-'*12} {'-'*8} {'-'*7}")
            
            total_customers = len(segments_data)
            for segment, count in sorted(segment_stats.items()):
                percentage = count / total_customers * 100
                print(f"  {segment:<12} {count:<8} {percentage:6.1f}%")
            
            # Top klienci VIP
            vip_customers = DataFilter.filter_by_field(segments_data, "segment", "VIP")
            if vip_customers:
                print(f"\n  üåü Top klienci VIP:")
                sorted_vip = sorted(vip_customers, key=lambda x: x["total_spent"], reverse=True)
                for customer in sorted_vip[:3]:
                    print(f"    {customer['name']}: {customer['total_spent']:.2f} PLN ({customer['order_count']} zam√≥wie≈Ñ)")
    
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd segmentacji klient√≥w: {e}")
    
    # 2. Analiza retencji klient√≥w
    print("\n2. üîÑ Analiza retencji klient√≥w")
    
    retention_query = """
    SELECT 
        DATE(o.order_date, 'start of month') as order_month,
        COUNT(DISTINCT o.customer_id) as unique_customers,
        COUNT(o.id) as total_orders,
        AVG(o.total_amount) as avg_order_value
    FROM orders o
    WHERE o.order_date >= datetime('now', '-6 months')
    GROUP BY DATE(o.order_date, 'start of month')
    ORDER BY order_month DESC
    """
    
    try:
        retention_data = db.execute_raw_sql("ecommerce_db", retention_query)
        if retention_data:
            print(f"  {'MiesiƒÖc':<12} {'Klienci':<8} {'Zam√≥wienia':<10} {'≈ör. warto≈õƒá'}")
            print(f"  {'-'*12} {'-'*8} {'-'*10} {'-'*11}")
            
            for row in retention_data:
                month = row['order_month'][:7]  # YYYY-MM
                print(f"  {month:<12} {row['unique_customers']:<8} {row['total_orders']:<10} {row['avg_order_value']:<11.2f}")
    
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd analizy retencji: {e}")
    
    # 3. Identyfikacja klient√≥w wymagajƒÖcych uwagi
    print("\n3. üö® Klienci wymagajƒÖcy uwagi")
    
    # Klienci, kt√≥rzy nie z≈Ço≈ºyli zam√≥wienia przez d≈Çugi czas
    inactive_customers_query = """
    SELECT 
        c.first_name,
        c.last_name,
        c.email,
        MAX(o.order_date) as last_order_date,
        julianday('now') - julianday(MAX(o.order_date)) as days_since_last_order,
        COUNT(o.id) as total_orders,
        SUM(o.total_amount) as total_spent
    FROM customers c
    JOIN orders o ON c.id = o.customer_id
    WHERE c.status = 'active'
    GROUP BY c.id
    HAVING days_since_last_order > 60 AND total_orders >= 2
    ORDER BY total_spent DESC
    LIMIT 5
    """
    
    try:
        inactive_customers = db.execute_raw_sql("ecommerce_db", inactive_customers_query)
        if inactive_customers:
            print("  üìß Klienci do kampanii reaktywacyjnej:")
            for customer in inactive_customers:
                days = int(customer['days_since_last_order'])
                print(f"    {customer['first_name']} {customer['last_name']}: {days} dni temu ({customer['total_spent']:.2f} PLN)")
        else:
            print("  ‚úÖ Brak klient√≥w wymagajƒÖcych kampanii reaktywacyjnej")
    
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd identyfikacji nieaktywnych klient√≥w: {e}")

@handle_database_errors("monitoring_scenario")
def monitoring_scenario():
    """Scenariusz monitoringu systemowego"""
    print("\n=== üîç Scenariusz Monitoring Systemowy ===")
    
    db = get_db_manager()
    logger = get_db_logger()
    
    # Utw√≥rz bazƒô monitoringu
    if not db.create_database("monitoring_db"):
        raise LuxDBError("Nie uda≈Ço siƒô utworzyƒá bazy monitoringu")
    
    db.create_table_from_model("monitoring_db", SystemAlert)
    
    # 1. Generowanie alert√≥w systemowych
    print("1. üö® Generowanie alert√≥w systemowych")
    
    alert_types = [
        ("performance", "high", "High CPU Usage", "CPU usage exceeded 90% for 5 minutes"),
        ("performance", "medium", "Memory Warning", "Memory usage is at 75%"),
        ("security", "critical", "Failed Login Attempts", "Multiple failed login attempts detected"),
        ("security", "high", "Suspicious Activity", "Unusual access pattern detected"),
        ("business", "medium", "Low Stock Alert", "Multiple products below minimum stock level"),
        ("business", "low", "Order Processing Delay", "Order processing time increased"),
        ("performance", "critical", "Database Connection Timeout", "Database response time exceeded threshold"),
        ("security", "medium", "Unauthorized API Access", "API access from unrecognized IP"),
        ("business", "high", "Payment Processing Error", "Payment gateway returned errors"),
        ("performance", "low", "Slow Query Detected", "Database query execution time warning")
    ]
    
    systems = ["web-server", "api-gateway", "database", "payment-service", "notification-service"]
    
    alerts_data = []
    error_collector = ErrorCollector()
    
    # Generuj alerty z ostatnich 7 dni
    for day in range(7):
        base_date = datetime.now() - timedelta(days=day)
        
        # Wiƒôcej alert√≥w w dzie≈Ñ roboczy
        daily_alerts = 15 if base_date.weekday() < 5 else 8
        
        for _ in range(daily_alerts):
            alert_type, severity, title, message = random.choice(alert_types)
            
            # Symuluj r√≥≈ºne wzorce
            alert_time = base_date + timedelta(
                hours=random.randint(0, 23),
                minutes=random.randint(0, 59)
            )
            
            alert = {
                "alert_type": alert_type,
                "severity": severity,
                "title": title,
                "message": message,
                "source_system": random.choice(systems),
                "is_resolved": random.random() > 0.3,  # 70% rozwiƒÖzanych
                "created_at": alert_time
            }
            
            # Dodaj resolved_at dla rozwiƒÖzanych alert√≥w
            if alert["is_resolved"]:
                alert["resolved_at"] = alert_time + timedelta(
                    hours=random.randint(1, 24)
                )
            
            error_collector.increment_total()
            try:
                alerts_data.append(alert)
                error_collector.add_success()
            except Exception as e:
                error_collector.add_error(e, {"alert": alert})
    
    # Wstaw alerty
    success = db.insert_batch("monitoring_db", SystemAlert, alerts_data)
    
    if success:
        print(f"  ‚úÖ Wygenerowano {len(alerts_data)} alert√≥w")
        
        # Poka≈º statystyki generowania
        summary = error_collector.get_summary()
        if summary['failed_operations'] > 0:
            print(f"  ‚ö†Ô∏è  {summary['failed_operations']} b≈Çƒôd√≥w podczas generowania")
    else:
        print("  ‚ùå B≈ÇƒÖd generowania alert√≥w")
        return
    
    # 2. Analiza alert√≥w wed≈Çug priorytet√≥w
    print("\n2. üìä Analiza alert√≥w wed≈Çug priorytet√≥w")
    
    priority_analysis_query = (SQLQueryBuilder()
                              .select("severity",
                                     "COUNT(*) as alert_count",
                                     "SUM(CASE WHEN is_resolved = 1 THEN 1 ELSE 0 END) as resolved_count",
                                     "AVG(CASE WHEN is_resolved = 1 THEN julianday(resolved_at) - julianday(created_at) ELSE NULL END) as avg_resolution_time")
                              .from_table("system_alerts")
                              .where("created_at >= datetime('now', '-7 days')")
                              .group_by("severity")
                              .order_by("CASE severity WHEN 'critical' THEN 1 WHEN 'high' THEN 2 WHEN 'medium' THEN 3 ELSE 4 END")
                              .build())
    
    try:
        priority_results = db.execute_raw_sql("monitoring_db", priority_analysis_query)
        if priority_results:
            print(f"  {'Priorytet':<10} {'≈ÅƒÖcznie':<8} {'RozwiƒÖzane':<10} {'≈ör. czas':<10}")
            print(f"  {'-'*10} {'-'*8} {'-'*10} {'-'*10}")
            
            for row in priority_results:
                resolution_rate = (row['resolved_count'] / row['alert_count'] * 100) if row['alert_count'] > 0 else 0
                avg_time = row['avg_resolution_time'] or 0
                avg_hours = avg_time * 24  # Konwersja dni na godziny
                
                print(f"  {row['severity']:<10} {row['alert_count']:<8} {resolution_rate:<9.1f}% {avg_hours:<9.1f}h")
    
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd analizy priorytet√≥w: {e}")
    
    # 3. Trendy alert√≥w w czasie
    print("\n3. üìà Trendy alert√≥w w czasie")
    
    trends_query = """
    SELECT 
        DATE(created_at) as alert_date,
        COUNT(*) as total_alerts,
        SUM(CASE WHEN severity = 'critical' THEN 1 ELSE 0 END) as critical_alerts,
        SUM(CASE WHEN severity = 'high' THEN 1 ELSE 0 END) as high_alerts,
        COUNT(DISTINCT source_system) as affected_systems
    FROM system_alerts
    WHERE created_at >= datetime('now', '-7 days')
    GROUP BY DATE(created_at)
    ORDER BY alert_date DESC
    """
    
    try:
        trends_data = db.execute_raw_sql("monitoring_db", trends_query)
        if trends_data:
            print(f"  {'Data':<12} {'≈ÅƒÖcznie':<8} {'Krytyczne':<10} {'Wysokie':<8} {'Systemy'}")
            print(f"  {'-'*12} {'-'*8} {'-'*10} {'-'*8} {'-'*7}")
            
            for row in trends_data:
                print(f"  {row['alert_date']:<12} {row['total_alerts']:<8} {row['critical_alerts']:<10} {row['high_alerts']:<8} {row['affected_systems']}")
    
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd analizy trend√≥w: {e}")
    
    # 4. System rekomendacji
    print("\n4. üí° Rekomendacje systemowe")
    
    # Znajd≈∫ systemy z najwy≈ºszƒÖ liczbƒÖ nierozwiƒÖzanych alert√≥w
    problem_systems_query = """
    SELECT 
        source_system,
        COUNT(*) as unresolved_alerts,
        COUNT(CASE WHEN severity IN ('critical', 'high') THEN 1 END) as critical_high_alerts,
        MIN(created_at) as oldest_alert
    FROM system_alerts
    WHERE is_resolved = 0
    GROUP BY source_system
    HAVING unresolved_alerts >= 2
    ORDER BY critical_high_alerts DESC, unresolved_alerts DESC
    """
    
    try:
        problem_systems = db.execute_raw_sql("monitoring_db", problem_systems_query)
        if problem_systems:
            print("  üö® Systemy wymagajƒÖce uwagi:")
            for system in problem_systems:
                print(f"    {system['source_system']}: {system['unresolved_alerts']} nierozwiƒÖzanych ({system['critical_high_alerts']} krytycznych/wysokich)")
        else:
            print("  ‚úÖ Wszystkie systemy dzia≈ÇajƒÖ prawid≈Çowo")
        
        # Og√≥lne rekomendacje
        total_unresolved_query = "SELECT COUNT(*) as count FROM system_alerts WHERE is_resolved = 0"
        unresolved_result = db.execute_raw_sql("monitoring_db", total_unresolved_query)
        
        if unresolved_result:
            unresolved_count = unresolved_result[0]['count']
            if unresolved_count > 10:
                print("  üìã Zalecenie: Rozwa≈º zwiƒôkszenie zespo≈Çu wsparcia technicznego")
            elif unresolved_count > 5:
                print("  üìã Zalecenie: Przeanalizuj najczƒôstsze przyczyny alert√≥w")
            else:
                print("  üìã Status: Poziom alert√≥w w normie")
    
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd generowania rekomendacji: {e}")

@handle_database_errors("data_warehouse_scenario")
def data_warehouse_scenario():
    """Scenariusz hurtowni danych - ETL i raportowanie"""
    print("\n=== üè¢ Scenariusz Data Warehouse ===")
    
    db = get_db_manager()
    logger = get_db_logger()
    
    # Sprawd≈∫ czy mamy dane ≈∫r√≥d≈Çowe
    source_databases = ["ecommerce_db", "monitoring_db"]
    available_dbs = db.list_databases()
    
    missing_dbs = [db_name for db_name in source_databases if db_name not in available_dbs]
    if missing_dbs:
        print(f"  ‚ùå Brakuje baz ≈∫r√≥d≈Çowych: {missing_dbs}")
        print("  Uruchom najpierw ecommerce_scenario() i monitoring_scenario()")
        return
    
    # Utw√≥rz bazƒô hurtowni danych
    if not db.create_database("datawarehouse_db"):
        raise LuxDBError("Nie uda≈Ço siƒô utworzyƒá bazy hurtowni danych")
    
    # 1. Proces ETL - Extract, Transform, Load
    print("1. üîÑ Proces ETL")
    
    # Extract - wyciƒÖgnij dane z r√≥≈ºnych ≈∫r√≥de≈Ç
    print("  üì§ Extract - pobieranie danych ≈∫r√≥d≈Çowych")
    
    # Dane sprzeda≈ºowe z e-commerce
    sales_extract_query = """
    SELECT 
        o.order_date,
        o.total_amount,
        o.status as order_status,
        c.company,
        CASE 
            WHEN c.company IS NOT NULL THEN 'B2B'
            ELSE 'B2C'
        END as customer_type,
        p.category as product_category
    FROM orders o
    JOIN customers c ON o.customer_id = c.id
    JOIN order_items oi ON o.id = oi.order_id
    JOIN products p ON oi.product_id = p.id
    WHERE o.status IN ('confirmed', 'shipped', 'delivered')
    """
    
    try:
        sales_data = db.execute_raw_sql("ecommerce_db", sales_extract_query)
        print(f"    ‚úÖ Wyodrƒôbniono {len(sales_data)} rekord√≥w sprzeda≈ºowych")
    except Exception as e:
        print(f"    ‚ùå B≈ÇƒÖd ekstrakcji sprzeda≈ºy: {e}")
        sales_data = []
    
    # Dane systemowe z monitoringu
    monitoring_extract_query = """
    SELECT 
        DATE(created_at) as alert_date,
        alert_type,
        severity,
        source_system,
        CASE WHEN is_resolved = 1 THEN 'resolved' ELSE 'open' END as status
    FROM system_alerts
    WHERE created_at >= datetime('now', '-30 days')
    """
    
    try:
        monitoring_data = db.execute_raw_sql("monitoring_db", monitoring_extract_query)
        print(f"    ‚úÖ Wyodrƒôbniono {len(monitoring_data)} rekord√≥w monitoringu")
    except Exception as e:
        print(f"    ‚ùå B≈ÇƒÖd ekstrakcji monitoringu: {e}")
        monitoring_data = []
    
    # Transform - przetw√≥rz dane
    print("  üîß Transform - przetwarzanie danych")
    
    if sales_data:
        # Dodaj pola obliczone
        sales_transformed = DataTransformer.add_computed_field(
            sales_data, 
            "revenue_bucket",
            lambda r: "High" if r.get("total_amount", 0) > 500 else "Medium" if r.get("total_amount", 0) > 100 else "Low"
        )
        
        # Normalizuj kategorie
        sales_transformed = DataTransformer.normalize_strings(
            sales_transformed, 
            ["product_category"], 
            lowercase=True
        )
        
        print(f"    ‚úÖ Przetworzono dane sprzeda≈ºowe")
    else:
        sales_transformed = []
    
    if monitoring_data:
        # Agreguj alerty wed≈Çug dnia i systemu
        monitoring_aggregated = []
        daily_system_stats = defaultdict(lambda: {"total_alerts": 0, "critical_alerts": 0, "resolved_alerts": 0})
        
        for record in monitoring_data:
            key = (record["alert_date"], record["source_system"])
            daily_system_stats[key]["total_alerts"] += 1
            
            if record["severity"] == "critical":
                daily_system_stats[key]["critical_alerts"] += 1
            
            if record["status"] == "resolved":
                daily_system_stats[key]["resolved_alerts"] += 1
        
        for (date, system), stats in daily_system_stats.items():
            monitoring_aggregated.append({
                "alert_date": date,
                "source_system": system,
                "total_alerts": stats["total_alerts"],
                "critical_alerts": stats["critical_alerts"],
                "resolved_alerts": stats["resolved_alerts"],
                "resolution_rate": (stats["resolved_alerts"] / stats["total_alerts"] * 100) if stats["total_alerts"] > 0 else 0
            })
        
        print(f"    ‚úÖ Zagregowano dane monitoringu do {len(monitoring_aggregated)} rekord√≥w")
    else:
        monitoring_aggregated = []
    
    # Load - za≈Çaduj do hurtowni (symulacja poprzez eksport)
    print("  üì• Load - ≈Çadowanie do hurtowni danych")
    
    exporter = DataExporter()
    
    try:
        import tempfile
        with tempfile.TemporaryDirectory() as temp_dir:
            # Zapisz przetworzone dane
            if sales_transformed:
                sales_file = os.path.join(temp_dir, "sales_mart.json")
                exporter.export_to_json(sales_transformed, sales_file)
                print(f"    ‚úÖ Za≈Çadowano dane sprzeda≈ºowe")
            
            if monitoring_aggregated:
                monitoring_file = os.path.join(temp_dir, "monitoring_mart.json")
                exporter.export_to_json(monitoring_aggregated, monitoring_file)
                print(f"    ‚úÖ Za≈Çadowano dane monitoringu")
    
    except Exception as e:
        print(f"    ‚ùå B≈ÇƒÖd ≈Çadowania danych: {e}")
    
    # 2. Analiza wielowymiarowa
    print("\n2. üìä Analiza wielowymiarowa")
    
    if sales_transformed:
        # Analiza sprzeda≈ºy wed≈Çug wymiar√≥w
        print("  Analiza sprzeda≈ºy:")
        
        # Wed≈Çug typu klienta
        customer_type_analysis = DataAggregator.summarize_by_group(
            sales_transformed, 
            "customer_type", 
            "total_amount",
            ["count", "sum", "avg"]
        )
        
        print(f"    {'Typ klienta':<10} {'Zam√≥wienia':<10} {'Przych√≥d':<12} {'≈ör. warto≈õƒá'}")
        print(f"    {'-'*10} {'-'*10} {'-'*12} {'-'*11}")
        
        for customer_type, stats in customer_type_analysis.items():
            print(f"    {customer_type:<10} {stats['count']:<10} {stats['sum']:<12.2f} {stats['avg']:<11.2f}")
        
        # Wed≈Çug kategorii produkt√≥w
        category_revenue = DataAggregator.count_by_field(sales_transformed, "product_category")
        print(f"\n    Top kategorie produkt√≥w:")
        for category, count in sorted(category_revenue.items(), key=lambda x: x[1], reverse=True)[:3]:
            print(f"      {category}: {count} zam√≥wie≈Ñ")
    
    # 3. Raport wykonawczy
    print("\n3. üìã Raport wykonawczy - Dashboard")
    
    print("  KPI - Kluczowe wska≈∫niki wydajno≈õci:")
    
    # Oblicz KPI sprzeda≈ºowe
    if sales_transformed:
        total_revenue = sum(float(record.get("total_amount", 0)) for record in sales_transformed)
        total_orders = len(sales_transformed)
        avg_order_value = total_revenue / total_orders if total_orders > 0 else 0
        
        print(f"    üí∞ ≈ÅƒÖczny przych√≥d: {total_revenue:,.2f} PLN")
        print(f"    üõí Liczba zam√≥wie≈Ñ: {total_orders:,}")
        print(f"    üìä ≈örednia warto≈õƒá zam√≥wienia: {avg_order_value:.2f} PLN")
        
        # Analiza rentowno≈õci
        high_value_orders = len(DataFilter.filter_by_field(sales_transformed, "revenue_bucket", "High"))
        high_value_percentage = (high_value_orders / total_orders * 100) if total_orders > 0 else 0
        print(f"    üéØ Zam√≥wienia wysokiej warto≈õci: {high_value_percentage:.1f}%")
    
    # Oblicz KPI systemowe
    if monitoring_aggregated:
        total_alerts = sum(record.get("total_alerts", 0) for record in monitoring_aggregated)
        total_critical = sum(record.get("critical_alerts", 0) for record in monitoring_aggregated)
        
        if total_alerts > 0:
            critical_percentage = (total_critical / total_alerts * 100)
            avg_resolution_rate = sum(record.get("resolution_rate", 0) for record in monitoring_aggregated) / len(monitoring_aggregated)
            
            print(f"    üö® ≈ÅƒÖczna liczba alert√≥w: {total_alerts:,}")
            print(f"    üî¥ Alerty krytyczne: {critical_percentage:.1f}%")
            print(f"    ‚úÖ ≈öredni wska≈∫nik rozwiƒÖza≈Ñ: {avg_resolution_rate:.1f}%")
    
    # 4. Automatyzacja raportowania
    print("\n4. ü§ñ Automatyzacja raportowania")
    
    # Symulacja automatycznego harmonogramu
    automation_schedule = [
        ("Raport sprzeda≈ºowy", "codziennie 08:00", "kierownictwo sprzeda≈ºy"),
        ("Analiza systemowa", "codziennie 06:00", "zesp√≥≈Ç IT"),
        ("Dashboard wykonawczy", "poniedzia≈Çek 09:00", "zarzƒÖd"),
        ("Raport klient√≥w", "pierwszy dzie≈Ñ miesiƒÖca", "zesp√≥≈Ç CRM"),
        ("Analiza rentowno≈õci", "co tydzie≈Ñ", "kontroling")
    ]
    
    print("  üìÖ Harmonogram automatycznych raport√≥w:")
    for report_name, schedule, recipients in automation_schedule:
        print(f"    {report_name}: {schedule} ‚Üí {recipients}")
    
    logger.log_database_operation("data_warehouse_etl", "datawarehouse_db", True, 
                                f"Processed {len(sales_data)} sales + {len(monitoring_data)} monitoring records")

def main():
    """G≈Ç√≥wna funkcja demonstracyjna"""
    print("üöÄ LuxDB - Rzeczywiste scenariusze biznesowe")
    print("=" * 60)
    
    try:
        # Uruchom wszystkie scenariusze
        ecommerce_scenario()
        crm_scenario()
        monitoring_scenario()
        data_warehouse_scenario()
        
        print("\n‚úÖ Wszystkie scenariusze biznesowe zako≈Ñczone pomy≈õlnie!")
        print("\nüìä Podsumowanie:")
        print("  üõí E-commerce: ZarzƒÖdzanie produktami, zam√≥wieniami i analizƒÖ sprzeda≈ºy")
        print("  üëî CRM: Segmentacja klient√≥w i analiza retencji")
        print("  üîç Monitoring: Alerty systemowe i analiza trend√≥w")
        print("  üè¢ Data Warehouse: Proces ETL i raportowanie wielowymiarowe")
        
    except Exception as e:
        print(f"\n‚ùå B≈ÇƒÖd w scenariuszach: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        # Zamknij po≈ÇƒÖczenia
        db = get_db_manager()
        db.close_all_connections()
        print("\nüîí Zamkniƒôto wszystkie po≈ÇƒÖczenia")

if __name__ == "__main__":
    main()
